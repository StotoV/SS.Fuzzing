Results of the AFL fuzzer

Introduction:
The goal of this research is to determine the effectiveness of AFL as fuzzing software.

Method:
The environment of the AFL experiment has been controlled by using Docker, enabling the exact reproduction of the (deterministic) steps of the fuzzer. In the Docker container the required dependencies for ffmpeg and afl-fuzzer are downloaded, whereby ffmpeg is built from source using the gcc compiler provided by the afl-fuzzer package. The test cases are loaded from the mounted test cases volume that points to the host system. The results are written in a results volume, also mounted from the host system. The results are written in a directory named after the starting datetime of the experiment.

Experiments:
In total three experiments have taken place, one with one test case (nyan_cat-trimmed.mp4) and the latest version of ffmpeg (4.3)[experiment 1], one with two test cases (nyan_cat-trimmed.mp4, sample2.mp4) and the latest version of ffmpeg [experiment 2] and the third with two test cases (nyan_cat-trimmed.mp4, sample2.mp4) and an older version of ffmpeg (4.1.1)[experiment 3].

In each of the experiments multiple concurrent fuzzers were used, of all the alive fuzzers one would do deterministic fuzzing while the others were set to random mode.

Results:
[experiment 1]
Fuzzers alive : 10
Total run time : 103 days, 2 hours
Total execs : 390 million
Cumulative speed : 435 execs/sec
Pending paths : 0 faves, 0 total
Pending per fuzzer : 0 faves, 0 total (on average)
Crashes found : 0 locally unique

[experiment 2]
Fuzzers alive : 15
Dead or remote : 1 (excluded from stats)
Total run time : 59 days, 16 hours
Total execs : 194 million
Cumulative speed : 555 execs/sec
Pending paths : 0 faves, 0 total
Pending per fuzzer : 0 faves, 0 total (on average)
Crashes found : 0 locally unique

[experiment 3]
Fuzzers alive : 13
Total run time : 16 days, 19 hours
Total execs : 323 million
Cumulative speed : 2883 execs/sec
Pending paths : 0 faves, 0 total
Pending per fuzzer : 0 faves, 0 total (on average)
Crashes found : 0 locally unique

Discussion:
As can be seen in the results section, no crashes or any meaningful data was found. One could argue that the latest version of ffmpeg simply contains no errors and therefore nothing was found. However, fuzzing an older version of ffmpeg, which contains known vulnerabilities[1], also yielded no results.

This is however searching for a needle in a haystack, combining this with the knowledge that ffmpeg is a application that is heavily fuzzed[2][3][4] makes the results of the experiments inadequate to determine the effectiveness of AFL as a fuzzer.

Conclusion:
The experiments conducted in this research are unfortunately not enough to determine the effectiveness of AFL as a fuzzer. The next logical step forward would therefore be to experiment AFL more extensively on more applications.

Sources:
[1] https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=ffmpeg+4.1.1 
[2] https://hardik05.wordpress.com/2020/08/22/fuzzing-ffmpeg-with-afl-on-ubuntu/
[3] https://trac.ffmpeg.org/ticket/4969
[4] https://github.com/AngoraFuzzer/FuzzingRealProgramBenchStatistics
